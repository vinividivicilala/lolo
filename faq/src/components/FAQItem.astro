---
const { icon, question, index, answer } = Astro.props;
---

<div class="faq-item bg-base-100 rounded-box shadow-md border border-base-300" data-framer>
  <div class="faq-content-wrapper p-4">
    <div class="flex items-start gap-4">
      <div class="faq-number w-8 h-8 flex items-center justify-center rounded-full bg-primary text-primary-content font-bold text-sm">
        {index}
      </div>
      <div class="faq-icon text-2xl">
        {icon || "‚ùì"}
      </div>
      <div class="faq-content flex-1">
        <h2 class="text-lg font-semibold font-montserrat flex items-center gap-2 cursor-pointer mb-0">
          <button class="faq-toggle btn btn-circle btn-ghost btn-xs" aria-expanded="false">
            <svg class="arrow-icon w-4 h-4" width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M5 12H19M19 12L12 5M19 12L12 19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </button>
          {question}
        </h2>
        <div class="faq-answer mt-3 text-base-content/80">
          {answer && <Fragment set:html={answer} />}
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .faq-item {
    transition: all 0.3s ease;
  }
  
  .faq-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
  }
  
  .faq-content h2 {
    margin: 0;
  }
  
  .faq-toggle {
    transition: transform 0.3s ease;
  }
  
  .faq-toggle[aria-expanded="true"] {
    transform: rotate(90deg);
  }
  
  .faq-answer {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.5s ease, opacity 0.3s ease;
    opacity: 0;
  }
  
  .faq-item.active .faq-answer {
    max-height: 500px;
    opacity: 1;
  }
  
  .faq-answer a {
    text-decoration: none;
    border-bottom: 1px dotted;
    transition: all 0.2s;
    font-weight: 500;
  }
  
  .faq-answer a:nth-child(1) {
    color: #FF6B6B;
    border-bottom-color: #FF6B6B;
  }
  
  .faq-answer a:nth-child(2) {
    color: #4ECDC4;
    border-bottom-color: #4ECDC4;
  }
  
  .faq-answer a:nth-child(3) {
    color: #FFE66D;
    border-bottom-color: #FFE66D;
  }
  
  .faq-answer a:nth-child(4) {
    color: #6A0572;
    border-bottom-color: #6A0572;
  }
  
  .faq-answer a:hover {
    opacity: 0.8;
    transform: translateY(-2px);
  }
  
  @media (max-width: 768px) {
    .faq-content-wrapper {
      padding: 16px;
    }
    
    .faq-content h2 {
      font-size: 1.1rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const faqItems = document.querySelectorAll('.faq-item');
    
    faqItems.forEach(item => {
      const toggle = item.querySelector('.faq-toggle');
      const answer = item.querySelector('.faq-answer');
      
      if (toggle && answer) {
        toggle.addEventListener('click', function(e) {
          e.stopPropagation();
          const isExpanded = toggle.getAttribute('aria-expanded') === 'true';
          toggle.setAttribute('aria-expanded', !isExpanded);
          item.classList.toggle('active');
          
          // Gunakan Framer Motion jika tersedia
          if (window.framerMotion && !isExpanded) {
            framerMotion.animate(answer, {
              opacity: [0, 1],
              transition: { duration: 0.3 }
            });
          }
        });
      }
      
      const heading = item.querySelector('h2');
      if (heading) {
        heading.addEventListener('click', function() {
          const toggle = item.querySelector('.faq-toggle');
          if (toggle) {
            toggle.click();
          }
        });
      }
    });
  });
</script>
