---
// src/pages/blog.astro
import Layout from '../layouts/Layout.astro';
---

<Layout title="Blog | Note Farid" description="Halaman blog kosong dengan desain baru." currentPage="blog">
  <div class="container">
    <main>
      <!-- Header Section -->
      <section class="header-section">
        <div class="header-content">
          <h1 class="big-title">
            <span class="typing-container">
              <span class="typing-text" data-texts='["Blog", "Articles", "Thoughts", "Stories"]'></span>
              <span class="typing-cursor">|</span>
            </span>
          </h1>
          <a href="/blog/all" class="all-blog-link">
            All Blog 
            <svg xmlns="http://www.w3.org/2000/svg" class="arrow-icon" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
              <path d="M5 12h14M12 5l7 7-7 7"/>
            </svg>
          </a>
        </div>
      </section>

      <!-- Blog Content Grid -->
      <div class="blog-grid">
        <!-- Blog Content Section 1 -->
        <section class="linebox">
          <div class="blog-meta">
            <div class="meta-item">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
              </svg>
              <span>15 Mar 2024</span>
            </div>
            <div class="meta-item">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
                <circle cx="12" cy="12" r="3"/>
              </svg>
              <span>5 min read</span>
            </div>
          </div>

          <h2 class="blog-title typing-subtitle" data-texts='["Konten Blog Akan Segera Hadir", "Coming Soon", "Stay Tuned", "Blog Under Construction"]'></h2>
          <p class="desc">
            Semua artikel akan tampil di sini dengan desain bersih dan modern. 
            Stay tuned untuk update terbaru!
          </p>

          <div class="tag-list">
            <span class="tag">Astro</span>
            <span class="tag">Blog</span>
            <span class="tag">Coming Soon</span>
          </div>
        </section>

        <!-- Blog Content Section 2 -->
        <section class="linebox">
          <div class="blog-meta">
            <div class="meta-item">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
              </svg>
              <span>20 Mar 2024</span>
            </div>
            <div class="meta-item">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
                <circle cx="12" cy="12" r="3"/>
              </svg>
              <span>7 min read</span>
            </div>
          </div>

          <h2 class="blog-title typing-fade" data-texts='["Tips Pengembangan Web Modern", "Modern Web Dev Tips", "Web Development Guide", "Latest Web Techniques"]'></h2>
          <p class="desc">
            Pelajari teknik-teknik terbaru dalam pengembangan web modern 
            untuk meningkatkan performa dan user experience.
          </p>

          <div class="tag-list">
            <span class="tag">Web Dev</span>
            <span class="tag">Tips</span>
            <span class="tag">Modern</span>
          </div>
        </section>

        <!-- Blog Content Section 3 -->
        <section class="linebox">
          <div class="blog-meta">
            <div class="meta-item">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
              </svg>
              <span>25 Mar 2024</span>
            </div>
            <div class="meta-item">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
                <circle cx="12" cy="12" r="3"/>
              </svg>
              <span>10 min read</span>
            </div>
          </div>

          <h2 class="blog-title typing-slide" data-texts='["Optimisasi SEO untuk Developer", "SEO Technical Guide", "Developer SEO Optimization", "Search Engine Optimization"]'></h2>
          <p class="desc">
            Panduan lengkap optimisasi SEO teknikal untuk developer 
            yang ingin meningkatkan ranking website di mesin pencari.
          </p>

          <div class="tag-list">
            <span class="tag">SEO</span>
            <span class="tag">Optimization</span>
            <span class="tag">Technical</span>
          </div>
        </section>

        <!-- Blog Content Section 4 -->
        <section class="linebox">
          <div class="blog-meta">
            <div class="meta-item">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
              </svg>
              <span>30 Mar 2024</span>
            </div>
            <div class="meta-item">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
                <circle cx="12" cy="12" r="3"/>
              </svg>
              <span>8 min read</span>
            </div>
          </div>

          <h2 class="blog-title typing-scale" data-texts='["Framework JavaScript Terpopuler 2024", "Top JS Frameworks 2024", "JavaScript Framework Review", "2024 Framework Comparison"]'></h2>
          <p class="desc">
            Review mendalam tentang framework JavaScript terpopuler 
            tahun 2024 dan perbandingan fitur-fiturnya.
          </p>

          <div class="tag-list">
            <span class="tag">JavaScript</span>
            <span class="tag">Framework</span>
            <span class="tag">2024</span>
          </div>
        </section>
      </div>
    </main>
  </div>
</Layout>

<style>
  body {
    background: #111;
    color: #fff;
    font-family: 'Inter', sans-serif;
    font-size: 18px;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 40px 20px;
  }

  /* Header */
  .header-section {
    margin-bottom: 40px;
  }

  .header-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 20px;
  }

  .big-title {
    font-size: 48px;
    font-weight: 800;
    margin: 0;
    color: #fff;
  }

  /* Typing Effect Styles */
  .typing-container {
    display: inline-block;
    position: relative;
  }

  .typing-text {
    display: inline-block;
  }

  .typing-cursor {
    display: inline-block;
    margin-left: 2px;
    animation: blink 1s infinite;
    color: #4f46e5;
    font-weight: 300;
  }

  @keyframes blink {
    0%, 50% { opacity: 1; }
    51%, 100% { opacity: 0; }
  }

  /* Different typing animations */
  .typing-subtitle {
    position: relative;
    min-height: 1.3em;
  }

  .typing-fade {
    position: relative;
    min-height: 1.3em;
  }

  .typing-slide {
    position: relative;
    min-height: 1.3em;
    overflow: hidden;
  }

  .typing-scale {
    position: relative;
    min-height: 1.3em;
  }

  .all-blog-link {
    font-size: 1.4rem;
    font-weight: 700;
    display: flex;
    align-items: center;
    gap: 8px;
    color: rgba(255,255,255,0.85);
    padding: 12px 20px;
    border: 2px solid rgba(255,255,255,0.4);
    border-radius: 10px;
    text-decoration: none;
    transition: all 0.3s ease;
    background: rgba(255,255,255,0.1);
  }

  .all-blog-link:hover {
    background: rgba(255,255,255,0.2);
    color: #fff;
  }

  .arrow-icon {
    stroke: currentColor;
  }

  /* Blog Grid */
  .blog-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 30px;
    margin-top: 20px;
  }

  /* Linebox */
  .linebox {
    border: 2px solid rgba(255,255,255,0.4);
    background: rgba(255,255,255,0.08);
    border-radius: 16px;
    padding: 35px;
    color: #fff;
    transition: transform 0.3s ease, border-color 0.3s ease;
  }

  .linebox:hover {
    transform: translateY(-5px);
    border-color: rgba(255,255,255,0.6);
  }

  /* Blog Meta */
  .blog-meta {
    display: flex;
    gap: 20px;
    margin-bottom: 20px;
    flex-wrap: wrap;
  }

  .meta-item {
    display: flex;
    align-items: center;
    gap: 8px;
    color: rgba(255,255,255,0.8);
    font-size: 1rem;
  }

  /* Blog Title */
  .blog-title {
    font-size: 2.2rem;
    font-weight: 700;
    margin: 20px 0;
    color: #fff;
    line-height: 1.3;
  }

  .desc {
    color: rgba(255,255,255,0.85);
    line-height: 1.7;
    margin-bottom: 25px;
    font-size: 1.1rem;
  }

  /* Tags */
  .tag-list {
    display: flex;
    gap: 12px;
    flex-wrap: wrap;
  }

  .tag {
    background: rgba(255,255,255,0.15);
    border: 1px solid rgba(255,255,255,0.3);
    color: #fff;
    padding: 8px 16px;
    border-radius: 20px;
    font-size: 0.9rem;
    font-weight: 600;
  }

  /* Responsive */
  @media (max-width: 1024px) {
    .blog-grid {
      grid-template-columns: 1fr;
      gap: 25px;
    }
  }

  @media (max-width: 768px) {
    body {
      font-size: 16px;
    }

    .header-content {
      flex-direction: column;
      text-align: center;
    }

    .big-title {
      font-size: 2.8rem;
    }

    .blog-title {
      font-size: 1.8rem;
    }

    .desc {
      font-size: 1rem;
      text-align: left;
    }

    .linebox {
      padding: 25px 20px;
    }

    .all-blog-link {
      width: 100%;
      justify-content: center;
      font-size: 1.2rem;
    }

    .blog-grid {
      gap: 20px;
    }
  }

  @media (max-width: 480px) {
    .container {
      padding: 20px 15px;
    }

    .big-title {
      font-size: 2.2rem;
    }

    .blog-title {
      font-size: 1.5rem;
    }

    .linebox {
      padding: 20px 15px;
    }

    .blog-meta {
      gap: 15px;
    }

    .meta-item {
      font-size: 0.9rem;
    }
  }
</style>

<script>
  // Typing Effect dengan animasi berbeda-beda
  document.addEventListener('DOMContentLoaded', function() {
    // Animasi untuk judul utama (typing effect klasik)
    const mainTypingElement = document.querySelector('.typing-text');
    if (mainTypingElement) {
      const texts = JSON.parse(mainTypingElement.getAttribute('data-texts'));
      let textIndex = 0;
      let charIndex = 0;
      let isDeleting = false;
      let typingSpeed = 100;
      let deletingSpeed = 50;
      let pauseTime = 2000;

      function typeMain() {
        const currentText = texts[textIndex];
        
        if (isDeleting) {
          mainTypingElement.textContent = currentText.substring(0, charIndex - 1);
          charIndex--;
          typingSpeed = deletingSpeed;
        } else {
          mainTypingElement.textContent = currentText.substring(0, charIndex + 1);
          charIndex++;
          typingSpeed = 100;
        }

        if (!isDeleting && charIndex === currentText.length) {
          isDeleting = true;
          typingSpeed = pauseTime;
        } else if (isDeleting && charIndex === 0) {
          isDeleting = false;
          textIndex = (textIndex + 1) % texts.length;
          typingSpeed = 500;
        }

        setTimeout(typeMain, typingSpeed);
      }

      setTimeout(typeMain, 1000);
    }

    // Animasi untuk subtitle (fade effect)
    const subtitleElements = document.querySelectorAll('.typing-subtitle');
    subtitleElements.forEach((element, index) => {
      const texts = JSON.parse(element.getAttribute('data-texts'));
      let currentIndex = 0;
      
      function changeText() {
        element.style.opacity = '0';
        element.style.transition = 'opacity 0.5s ease';
        
        setTimeout(() => {
          element.textContent = texts[currentIndex];
          element.style.opacity = '1';
          currentIndex = (currentIndex + 1) % texts.length;
        }, 500);
        
        setTimeout(changeText, 3000);
      }
      
      // Start dengan delay berbeda untuk setiap element
      setTimeout(changeText, 1500 + (index * 1000));
    });

    // Animasi untuk fade effect
    const fadeElements = document.querySelectorAll('.typing-fade');
    fadeElements.forEach((element, index) => {
      const texts = JSON.parse(element.getAttribute('data-texts'));
      let currentIndex = 0;
      
      function changeTextFade() {
        element.style.transition = 'all 0.8s ease';
        element.style.transform = 'translateY(20px)';
        element.style.opacity = '0';
        
        setTimeout(() => {
          element.textContent = texts[currentIndex];
          element.style.transform = 'translateY(0)';
          element.style.opacity = '1';
          currentIndex = (currentIndex + 1) % texts.length;
        }, 800);
        
        setTimeout(changeTextFade, 3500);
      }
      
      setTimeout(changeTextFade, 2000 + (index * 800));
    });

    // Animasi untuk slide effect
    const slideElements = document.querySelectorAll('.typing-slide');
    slideElements.forEach((element, index) => {
      const texts = JSON.parse(element.getAttribute('data-texts'));
      let currentIndex = 0;
      
      function changeTextSlide() {
        element.style.transition = 'all 0.6s ease';
        element.style.transform = 'translateX(-100%)';
        element.style.opacity = '0';
        
        setTimeout(() => {
          element.textContent = texts[currentIndex];
          element.style.transform = 'translateX(0)';
          element.style.opacity = '1';
          currentIndex = (currentIndex + 1) % texts.length;
        }, 600);
        
        setTimeout(changeTextSlide, 4000);
      }
      
      setTimeout(changeTextSlide, 2500 + (index * 600));
    });

    // Animasi untuk scale effect
    const scaleElements = document.querySelectorAll('.typing-scale');
    scaleElements.forEach((element, index) => {
      const texts = JSON.parse(element.getAttribute('data-texts'));
      let currentIndex = 0;
      
      function changeTextScale() {
        element.style.transition = 'all 0.7s ease';
        element.style.transform = 'scale(0.8)';
        element.style.opacity = '0';
        
        setTimeout(() => {
          element.textContent = texts[currentIndex];
          element.style.transform = 'scale(1)';
          element.style.opacity = '1';
          currentIndex = (currentIndex + 1) % texts.length;
        }, 700);
        
        setTimeout(changeTextScale, 3800);
      }
      
      setTimeout(changeTextScale, 3000 + (index * 700));
    });
  });
</script>
