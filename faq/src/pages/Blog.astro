---
// src/pages/blog.astro
import Layout from '../layouts/Layout.astro';

import gsap from "gsap";
import ScrollTrigger from "gsap/ScrollTrigger";
import Flip from "gsap/Flip";
import Lenis from "@studio-freight/lenis";

// DATA BLOG OTOMATIS
const blogData = [
  {
    id: 1,
    title: "Konten Blog Akan Segera Hadir",
    date: "2024-03-15",
    readTime: 5,
    description: "Semua artikel akan tampil di sini dengan desain bersih dan modern. Stay tuned untuk update terbaru!",
    tags: ["Astro", "Blog", "Coming Soon"],
    isFeatured: true,
    isNew: true,
    bgColor: "gradient-1"
  },
  {
    id: 2,
    title: "Tips Pengembangan Web Modern", 
    date: "2024-03-20",
    readTime: 7,
    description: "Pelajari teknik-teknik terbaru dalam pengembangan web modern untuk meningkatkan performa dan user experience.",
    tags: ["Web Dev", "Tips", "Modern"],
    isFeatured: false,
    isNew: true,
    bgColor: "gradient-2"
  },
  {
    id: 3,
    title: "Optimisasi SEO untuk Developer",
    date: "2024-03-25", 
    readTime: 10,
    description: "Panduan lengkap optimisasi SEO teknikal untuk developer yang ingin meningkatkan ranking website di mesin pencari.",
    tags: ["SEO", "Optimization", "Technical"],
    isFeatured: true,
    isNew: false,
    bgColor: "gradient-3"
  },
  {
    id: 4,
    title: "Framework JavaScript Terpopuler 2024",
    date: "2024-03-30",
    readTime: 8,
    description: "Review mendalam tentang framework JavaScript terpopuler tahun 2024 dan perbandingan fitur-fiturnya.",
    tags: ["JavaScript", "Framework", "2024"],
    isFeatured: false,
    isNew: true,
    bgColor: "gradient-4"
  }
];

// FUNGSI OTOMATIS
const getLatestFeaturedPost = () => {
  const featuredPosts = blogData.filter(post => post.isFeatured);
  return featuredPosts.sort((a, b) => new Date(b.date) - new Date(a.date))[0];
};

const getNewPosts = () => {
  return blogData.filter(post => post.isNew);
};

const getTotalBlogCount = () => blogData.length;
const getNewPostCount = () => blogData.filter(post => post.isNew).length;
const getFeaturedCount = () => blogData.filter(post => post.isFeatured).length;

const formatDate = (dateString) => {
  const date = new Date(dateString);
  return date.toLocaleDateString('id-ID', { 
    day: 'numeric', 
    month: 'short', 
    year: 'numeric' 
  });
};

// VARIABEL OTOMATIS
const latestPost = getLatestFeaturedPost();
const newPostsCount = getNewPostCount();
const totalBlogs = getTotalBlogCount();
const featuredCount = getFeaturedCount();

// Register GSAP plugins
if (typeof window !== 'undefined') {
  gsap.registerPlugin(ScrollTrigger, Flip);
}
---

<Layout title="Blog | Note Farid" description="Halaman blog dengan desain modern dan animasi smooth." currentPage="blog">
  <div class="container">
    <main>
      <!-- HEADER SECTION -->
      <section class="header-section">
        <div class="header-content">
          <div class="title-container">
            <h1 class="big-title">
              <span class="animated-title">
                <span class="title-text" id="mainTitle">Blog</span>
                <span class="title-cursor">|</span>
              </span>
            </h1>
            <p class="subtitle">Tempat berbagi pengetahuan dan pengalaman tentang pengembangan web, teknologi, dan kreativitas digital.</p>
          </div>
          <a href="/blog/all" class="all-blog-link">
            All Blog 
            <svg xmlns="http://www.w3.org/2000/svg" class="arrow-icon" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
              <path d="M5 12h14M12 5l7 7-7 7"/>
            </svg>
          </a>
        </div>
      </section>

      <!-- SEARCH BAR -->
      <section class="search-section">
        <div class="search-container">
          <div class="search-icon">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="11" cy="11" r="8"/>
              <path d="m21 21-4.35-4.35"/>
            </svg>
          </div>
          <input 
            type="text" 
            id="blogSearch" 
            class="search-input" 
            placeholder="Cari judul blog, topik, atau tag..." 
            autocomplete="off"
          />
          <div class="search-results" id="searchResults"></div>
        </div>
      </section>

      <!-- COUNTER STATS -->
      <section class="stats-section">
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-icon">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"/>
                <path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"/>
              </svg>
            </div>
            <div class="stat-number" id="totalBlogsCounter">{totalBlogs}</div>
            <div class="stat-label">Total Blog</div>
          </div>
          <div class="stat-card">
            <div class="stat-icon">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"/>
              </svg>
            </div>
            <div class="stat-number" id="newPostsCounter">{newPostsCount}</div>
            <div class="stat-label">Update Terbaru</div>
          </div>
          <div class="stat-card">
            <div class="stat-icon">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"/>
              </svg>
            </div>
            <div class="stat-number" id="featuredCounter">{featuredCount}</div>
            <div class="stat-label">Featured</div>
          </div>
        </div>
      </section>

      <!-- FEATURED UPDATE SECTION -->
      {latestPost && (
        <section class="auto-featured-section">
          <div class="section-header">
            <h2 class="section-title">
              <span class="highlight-badge">Update Terbaru</span>
              Trending Now
            </h2>
            <div class="update-indicator">
              <span class="pulse-dot"></span>
              Baru saja diperbarui
            </div>
          </div>
          
          <div class="auto-featured-card">
            <div class="featured-image-auto">
              <div class="image-bg-auto {latestPost.bgColor}"></div>
              <div class="featured-badge-auto">Featured</div>
            </div>
            <div class="featured-content-auto">
              <div class="post-meta-auto">
                <span class="date-auto">{formatDate(latestPost.date)}</span>
                <span class="read-time-auto">{latestPost.readTime} min read</span>
                <span class="new-badge-auto">NEW</span>
              </div>
              <h3 class="post-title-auto">{latestPost.title}</h3>
              <p class="post-desc-auto">{latestPost.description}</p>
              <div class="tags-auto">
                {latestPost.tags.map(tag => (
                  <span class="tag-auto">{tag}</span>
                ))}
              </div>
              <a href={`/blog/${latestPost.id}`} class="read-more-auto">
                Baca Selengkapnya
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M5 12h14M12 5l7 7-7 7"/>
                </svg>
              </a>
            </div>
          </div>
        </section>
      )}

      <!-- HORIZONTAL SCROLL SECTION -->
      <section class="horizontal-scroll-section">
        <div class="horizontal-header">
          <h2 class="horizontal-title">Blog Terbaru</h2>
          <div class="scroll-indicator">
            <span class="scroll-text">Scroll horizontal</span>
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M5 12h14M12 5l7 7-7 7"/>
            </svg>
          </div>
        </div>
        
        <div class="horizontal-scroll-container">
          <div class="horizontal-scroll-wrapper">
            {blogData.map(post => (
              <div class="horizontal-card {post.bgColor}">
                <div class="card-header">
                  <div class="card-meta">
                    <span class="card-date">{formatDate(post.date)}</span>
                    <span class="card-read-time">{post.readTime} min read</span>
                  </div>
                  {post.isNew && <span class="card-new-badge">NEW</span>}
                </div>
                <h3 class="card-title">{post.title}</h3>
                <p class="card-desc">{post.description}</p>
                <div class="card-tags">
                  {post.tags.map(tag => (
                    <span class="card-tag">{tag}</span>
                  ))}
                </div>
                <a href={`/blog/${post.id}`} class="card-link">
                  Baca Artikel
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M5 12h14M12 5l7 7-7 7"/>
                  </svg>
                </a>
              </div>
            ))}
          </div>
        </div>
      </section>

      <!-- BLOG CONTENT GRID -->
      <div class="blog-grid">
        {blogData.map(post => (
          <section class="linebox {post.bgColor}">
            <div class="blog-meta">
              <div class="meta-item">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                </svg>
                <span>{formatDate(post.date)}</span>
              </div>
              <div class="meta-item">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
                  <circle cx="12" cy="12" r="3"/>
                </svg>
                <span>{post.readTime} min read</span>
              </div>
            </div>

            <h2 class="blog-title">{post.title}</h2>
            <p class="desc">{post.description}</p>

            <div class="tag-list">
              {post.tags.map(tag => (
                <span class="tag">{tag}</span>
              ))}
            </div>
          </section>
        ))}
      </div>
    </main>
  </div>
</Layout>

<style is:global>
  @import url('https://fonts.googleapis.com/css2?family=Arame:wght@400;500;600;700;800&display=swap');

  /* CSS VARIABLES */
  :root {
    --primary-bg: #111;
    --secondary-bg: rgba(255, 255, 255, 0.05);
    --border-color: rgba(255, 255, 255, 0.2);
    --text-primary: #fff;
    --text-secondary: rgba(255, 255, 255, 0.8);
    --accent-color: #4f46e5;
    --gradient-1: linear-gradient(135deg, #ff6b6b, #4ecdc4);
    --gradient-2: linear-gradient(135deg, #45b7d1, #96ceb4);
    --gradient-3: linear-gradient(135deg, #feca57, #ff9ff3);
    --gradient-4: linear-gradient(135deg, #54a0ff, #5f27cd);
  }

  body {
    background: var(--primary-bg);
    color: var(--text-primary);
    font-family: 'Arame', sans-serif;
    font-size: 18px;
    overflow-x: hidden;
  }

  h1, h2, h3, h4, h5, h6 {
    font-family: 'Arame', sans-serif;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 40px 20px;
  }

  /* Header */
  .header-section {
    margin-bottom: 60px;
  }

  .header-content {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    flex-wrap: wrap;
    gap: 30px;
  }

  .title-container {
    flex: 1;
    max-width: 600px;
  }

  .big-title {
    font-size: 4rem;
    font-weight: 800;
    margin: 0 0 15px 0;
    color: var(--text-primary);
    line-height: 1.1;
  }

  .subtitle {
    font-size: 1.2rem;
    color: var(--text-secondary);
    line-height: 1.6;
    margin: 0;
  }

  /* Animated Title Styles */
  .animated-title {
    display: inline-block;
    position: relative;
  }

  .title-text {
    display: inline-block;
    position: relative;
  }

  .title-cursor {
    display: inline-block;
    margin-left: 2px;
    animation: blink 1s infinite;
    color: var(--accent-color);
    font-weight: 300;
  }

  @keyframes blink {
    0%, 50% { opacity: 1; }
    51%, 100% { opacity: 0; }
  }

  /* Animation Effects */
  .typing-effect {
    animation: typing 0.5s ease-in-out;
  }

  .fade-effect {
    animation: fadeInOut 2s ease-in-out;
  }

  .slide-effect {
    animation: slideIn 1s ease-out;
  }

  .bounce-effect {
    animation: bounce 1s ease;
  }

  .glitch-effect {
    animation: glitch 0.5s ease-in-out;
  }

  .rotate-effect {
    animation: rotate 1s ease-in-out;
  }

  .scale-effect {
    animation: scale 0.8s ease-in-out;
  }

  .gradient-effect {
    background: linear-gradient(45deg, #ff6b6b, #4ecdc4, #45b7d1, #96ceb4, #feca57);
    background-size: 300% 300%;
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    animation: gradientShift 3s ease-in-out infinite;
  }

  /* Keyframes for animations */
  @keyframes typing {
    from { width: 0; opacity: 0; }
    to { width: auto; opacity: 1; }
  }

  @keyframes fadeInOut {
    0% { opacity: 0; transform: translateY(-20px); }
    50% { opacity: 1; transform: translateY(0); }
    100% { opacity: 0; transform: translateY(20px); }
  }

  @keyframes slideIn {
    0% { transform: translateX(-100%); opacity: 0; }
    100% { transform: translateX(0); opacity: 1; }
  }

  @keyframes bounce {
    0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
    40% { transform: translateY(-30px); }
    60% { transform: translateY(-15px); }
  }

  @keyframes glitch {
    0% { transform: translate(0); }
    20% { transform: translate(-5px, 5px); }
    40% { transform: translate(-5px, -5px); }
    60% { transform: translate(5px, 5px); }
    80% { transform: translate(5px, -5px); }
    100% { transform: translate(0); }
  }

  @keyframes rotate {
    0% { transform: rotate(0deg) scale(0.5); opacity: 0; }
    100% { transform: rotate(360deg) scale(1); opacity: 1; }
  }

  @keyframes scale {
    0% { transform: scale(0); opacity: 0; }
    70% { transform: scale(1.2); opacity: 1; }
    100% { transform: scale(1); opacity: 1; }
  }

  @keyframes gradientShift {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }

  .all-blog-link {
    font-size: 1.2rem;
    font-weight: 700;
    display: flex;
    align-items: center;
    gap: 8px;
    color: var(--text-primary);
    padding: 15px 25px;
    border: 2px solid var(--border-color);
    border-radius: 12px;
    text-decoration: none;
    transition: all 0.3s ease;
    background: var(--secondary-bg);
    white-space: nowrap;
  }

  .all-blog-link:hover {
    background: rgba(255, 255, 255, 0.1);
    border-color: var(--accent-color);
    transform: translateY(-2px);
    box-shadow: 0 10px 20px rgba(79, 70, 229, 0.2);
  }

  /* Search Bar */
  .search-section {
    margin: 40px 0;
  }

  .search-container {
    position: relative;
    max-width: 600px;
    margin: 0 auto;
  }

  .search-icon {
    position: absolute;
    left: 20px;
    top: 50%;
    transform: translateY(-50%);
    color: var(--text-secondary);
    z-index: 2;
  }

  .search-input {
    width: 100%;
    padding: 18px 20px 18px 55px;
    background: var(--secondary-bg);
    border: 2px solid var(--border-color);
    border-radius: 16px;
    color: var(--text-primary);
    font-size: 1.1rem;
    transition: all 0.3s ease;
    font-family: 'Arame', sans-serif;
  }

  .search-input:focus {
    outline: none;
    border-color: var(--accent-color);
    background: rgba(255, 255, 255, 0.08);
    box-shadow: 0 0 30px rgba(79, 70, 229, 0.3);
  }

  .search-input::placeholder {
    color: var(--text-secondary);
  }

  .search-results {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: rgba(20, 20, 20, 0.95);
    border: 1px solid var(--border-color);
    border-radius: 16px;
    margin-top: 10px;
    max-height: 300px;
    overflow-y: auto;
    display: none;
    z-index: 1000;
    backdrop-filter: blur(10px);
  }

  .search-result-item {
    padding: 15px 20px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    cursor: pointer;
    transition: background 0.3s ease;
    color: var(--text-primary);
  }

  .search-result-item:hover {
    background: rgba(255, 255, 255, 0.1);
  }

  .search-result-item:last-child {
    border-bottom: none;
  }

  /* Stats Section */
  .stats-section {
    margin: 50px 0;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 25px;
  }

  .stat-card {
    background: var(--secondary-bg);
    border: 1px solid var(--border-color);
    border-radius: 16px;
    padding: 30px;
    text-align: center;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .stat-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: var(--gradient-1);
    transform: scaleX(0);
    transition: transform 0.3s ease;
  }

  .stat-card:hover::before {
    transform: scaleX(1);
  }

  .stat-card:hover {
    transform: translateY(-5px);
    border-color: rgba(255, 255, 255, 0.3);
  }

  .stat-icon {
    margin-bottom: 15px;
    color: var(--accent-color);
  }

  .stat-number {
    font-size: 3rem;
    font-weight: 800;
    background: linear-gradient(135deg, #4f46e5, #06b6d4);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin-bottom: 10px;
  }

  .stat-label {
    font-size: 1rem;
    color: var(--text-secondary);
    font-weight: 600;
  }

  /* Auto Featured Section */
  .auto-featured-section {
    margin: 60px 0;
  }

  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
  }

  .section-title {
    font-size: 2.2rem;
    font-weight: 700;
    color: var(--text-primary);
    display: flex;
    align-items: center;
    gap: 15px;
  }

  .highlight-badge {
    background: var(--gradient-1);
    color: white;
    padding: 8px 15px;
    border-radius: 10px;
    font-size: 0.9rem;
    font-weight: 600;
  }

  .update-indicator {
    display: flex;
    align-items: center;
    gap: 8px;
    color: #4ecdc4;
    font-size: 1rem;
    font-weight: 600;
  }

  .pulse-dot {
    width: 10px;
    height: 10px;
    background: #4ecdc4;
    border-radius: 50%;
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0% { box-shadow: 0 0 0 0 rgba(78, 205, 196, 0.7); }
    70% { box-shadow: 0 0 0 10px rgba(78, 205, 196, 0); }
    100% { box-shadow: 0 0 0 0 rgba(78, 205, 196, 0); }
  }

  .auto-featured-card {
    display: grid;
    grid-template-columns: 350px 1fr;
    gap: 40px;
    background: var(--secondary-bg);
    border: 2px solid var(--border-color);
    border-radius: 24px;
    padding: 40px;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .auto-featured-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(79, 70, 229, 0.1), rgba(6, 182, 212, 0.1));
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .auto-featured-card:hover::before {
    opacity: 1;
  }

  .auto-featured-card:hover {
    border-color: rgba(255, 255, 255, 0.4);
    transform: translateY(-8px);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
  }

  .featured-image-auto {
    position: relative;
    border-radius: 16px;
    overflow: hidden;
  }

  .image-bg-auto {
    width: 100%;
    height: 250px;
    border-radius: 16px;
    animation: gradientShift 3s ease infinite;
    background-size: 200% 200%;
  }

  .featured-badge-auto {
    position: absolute;
    top: 15px;
    right: 15px;
    background: #ff6b6b;
    color: white;
    padding: 8px 15px;
    border-radius: 20px;
    font-size: 0.9rem;
    font-weight: 600;
  }

  .featured-content-auto {
    display: flex;
    flex-direction: column;
    justify-content: center;
    position: relative;
    z-index: 1;
  }

  .post-meta-auto {
    display: flex;
    gap: 20px;
    margin-bottom: 20px;
    flex-wrap: wrap;
  }

  .date-auto, .read-time-auto {
    color: var(--text-secondary);
    font-size: 1rem;
  }

  .new-badge-auto {
    background: #4ecdc4;
    color: white;
    padding: 6px 12px;
    border-radius: 8px;
    font-size: 0.9rem;
    font-weight: 600;
  }

  .post-title-auto {
    font-size: 2.5rem;
    font-weight: 700;
    margin: 10px 0;
    color: var(--text-primary);
    line-height: 1.2;
  }

  .post-desc-auto {
    color: var(--text-secondary);
    line-height: 1.7;
    margin-bottom: 25px;
    font-size: 1.2rem;
  }

  .tags-auto {
    display: flex;
    gap: 12px;
    flex-wrap: wrap;
    margin-bottom: 25px;
  }

  .tag-auto {
    background: rgba(255, 255, 255, 0.15);
    border: 1px solid rgba(255, 255, 255, 0.3);
    color: var(--text-primary);
    padding: 8px 16px;
    border-radius: 20px;
    font-size: 0.9rem;
    font-weight: 600;
  }

  .read-more-auto {
    display: inline-flex;
    align-items: center;
    gap: 10px;
    background: var(--accent-color);
    color: white;
    padding: 12px 24px;
    border-radius: 10px;
    text-decoration: none;
    font-weight: 600;
    transition: all 0.3s ease;
    width: fit-content;
  }

  .read-more-auto:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 20px rgba(79, 70, 229, 0.4);
  }

  /* HORIZONTAL SCROLL SECTION */
  .horizontal-scroll-section {
    margin: 80px 0;
    position: relative;
  }

  .horizontal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
  }

  .horizontal-title {
    font-size: 2.2rem;
    font-weight: 700;
    color: var(--text-primary);
    margin: 0;
  }

  .scroll-indicator {
    display: flex;
    align-items: center;
    gap: 8px;
    color: var(--text-secondary);
    font-size: 0.9rem;
    font-weight: 600;
  }

  .horizontal-scroll-container {
    position: relative;
    overflow: hidden;
    border-radius: 20px;
  }

  .horizontal-scroll-wrapper {
    display: flex;
    gap: 25px;
    padding: 10px 0;
    width: max-content;
    will-change: transform;
  }

  .horizontal-card {
    flex: 0 0 380px;
    background: var(--secondary-bg);
    border: 1px solid var(--border-color);
    border-radius: 20px;
    padding: 30px;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .horizontal-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: var(--gradient-1);
    transform: scaleX(0);
    transition: transform 0.3s ease;
  }

  .horizontal-card:hover::before {
    transform: scaleX(1);
  }

  .horizontal-card:hover {
    transform: translateY(-5px);
    border-color: rgba(255, 255, 255, 0.4);
  }

  .card-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 20px;
  }

  .card-meta {
    display: flex;
    flex-direction: column;
    gap: 5px;
  }

  .card-date, .card-read-time {
    font-size: 0.9rem;
    color: var(--text-secondary);
  }

  .card-new-badge {
    background: #4ecdc4;
    color: white;
    padding: 4px 10px;
    border-radius: 6px;
    font-size: 0.8rem;
    font-weight: 600;
  }

  .card-title {
    font-size: 1.8rem;
    font-weight: 700;
    margin: 0 0 15px 0;
    color: var(--text-primary);
    line-height: 1.3;
  }

  .card-desc {
    color: var(--text-secondary);
    line-height: 1.6;
    margin-bottom: 20px;
    font-size: 1rem;
  }

  .card-tags {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
    margin-bottom: 25px;
  }

  .card-tag {
    background: rgba(255, 255, 255, 0.15);
    border: 1px solid rgba(255, 255, 255, 0.3);
    color: var(--text-primary);
    padding: 6px 12px;
    border-radius: 15px;
    font-size: 0.8rem;
    font-weight: 600;
  }

  .card-link {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    color: var(--accent-color);
    text-decoration: none;
    font-weight: 600;
    transition: all 0.3s ease;
  }

  .card-link:hover {
    gap: 12px;
  }

  /* Blog Grid */
  .blog-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 35px;
    margin-top: 60px;
  }

  /* Linebox */
  .linebox {
    border: 2px solid var(--border-color);
    background: var(--secondary-bg);
    border-radius: 20px;
    padding: 40px;
    color: var(--text-primary);
    transition: transform 0.3s ease, border-color 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .linebox::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, var(--gradient-color-1), var(--gradient-color-2));
    transform: scaleX(0);
    transition: transform 0.3s ease;
  }

  .linebox:hover::before {
    transform: scaleX(1);
  }

  .linebox:hover {
    transform: translateY(-8px);
    border-color: rgba(255, 255, 255, 0.5);
  }

  /* Blog Meta */
  .blog-meta {
    display: flex;
    gap: 25px;
    margin-bottom: 25px;
    flex-wrap: wrap;
  }

  .meta-item {
    display: flex;
    align-items: center;
    gap: 10px;
    color: var(--text-secondary);
    font-size: 1rem;
  }

  /* Blog Title */
  .blog-title {
    font-size: 2.2rem;
    font-weight: 700;
    margin: 20px 0;
    color: var(--text-primary);
    line-height: 1.3;
  }

  .desc {
    color: var(--text-secondary);
    line-height: 1.7;
    margin-bottom: 30px;
    font-size: 1.1rem;
  }

  /* Tags */
  .tag-list {
    display: flex;
    gap: 12px;
    flex-wrap: wrap;
  }

  .tag {
    background: rgba(255, 255, 255, 0.15);
    border: 1px solid rgba(255, 255, 255, 0.3);
    color: var(--text-primary);
    padding: 8px 16px;
    border-radius: 20px;
    font-size: 0.9rem;
    font-weight: 600;
    transition: all 0.3s ease;
  }

  .tag:hover {
    background: rgba(255, 255, 255, 0.25);
  }

  /* Gradient Classes */
  .gradient-1 {
    --gradient-color-1: #ff6b6b;
    --gradient-color-2: #4ecdc4;
  }

  .gradient-2 {
    --gradient-color-1: #45b7d1;
    --gradient-color-2: #96ceb4;
  }

  .gradient-3 {
    --gradient-color-1: #feca57;
    --gradient-color-2: #ff9ff3;
  }

  .gradient-4 {
    --gradient-color-1: #54a0ff;
    --gradient-color-2: #5f27cd;
  }

  .gradient-1 .image-bg-auto {
    background: linear-gradient(135deg, #ff6b6b, #4ecdc4);
  }

  .gradient-2 .image-bg-auto {
    background: linear-gradient(135deg, #45b7d1, #96ceb4);
  }

  .gradient-3 .image-bg-auto {
    background: linear-gradient(135deg, #feca57, #ff9ff3);
  }

  .gradient-4 .image-bg-auto {
    background: linear-gradient(135deg, #54a0ff, #5f27cd);
  }

  /* Responsive Design */
  @media (max-width: 1024px) {
    .blog-grid {
      grid-template-columns: 1fr;
    }
    
    .auto-featured-card {
      grid-template-columns: 1fr;
      gap: 30px;
    }
    
    .stats-grid {
      grid-template-columns: repeat(3, 1fr);
    }
    
    .horizontal-card {
      flex: 0 0 350px;
    }
  }

  @media (max-width: 768px) {
    .container {
      padding: 20px 15px;
    }
    
    .big-title {
      font-size: 3rem;
    }
    
    .header-content {
      flex-direction: column;
      align-items: flex-start;
    }
    
    .stats-grid {
      grid-template-columns: 1fr;
      gap: 20px;
    }
    
    .section-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 15px;
    }
    
    .horizontal-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 15px;
    }
    
    .horizontal-card {
      flex: 0 0 300px;
    }
    
    .blog-meta {
      gap: 15px;
    }
    
    .blog-title {
      font-size: 1.8rem;
    }
  }

  @media (max-width: 480px) {
    .big-title {
      font-size: 2.5rem;
    }
    
    .auto-featured-card {
      padding: 25px;
    }
    
    .post-title-auto {
      font-size: 2rem;
    }
    
    .horizontal-card {
      flex: 0 0 280px;
      padding: 20px;
    }
    
    .card-title {
      font-size: 1.5rem;
    }
    
    .linebox {
      padding: 25px;
    }
  }
</style>

<script>
  // GSAP & Lenis Smooth Scroll
  document.addEventListener('DOMContentLoaded', () => {
    // Initialize Lenis for smooth scrolling
    const lenis = new Lenis({
      duration: 1.2,
      easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),
      direction: 'vertical',
      gestureDirection: 'vertical',
      smooth: true,
      smoothTouch: false,
      touchMultiplier: 2,
    });

    function raf(time) {
      lenis.raf(time);
      requestAnimationFrame(raf);
    }

    requestAnimationFrame(raf);

    // GSAP Animations
    gsap.registerPlugin(ScrollTrigger);

    // Animate title on load
    gsap.from('.title-text', {
      duration: 1,
      opacity: 0,
      y: 50,
      ease: 'power3.out'
    });

    // Animate subtitle
    gsap.from('.subtitle', {
      duration: 1,
      opacity: 0,
      y: 30,
      delay: 0.3,
      ease: 'power3.out'
    });

    // Animate stat cards
    gsap.from('.stat-card', {
      duration: 1,
      opacity: 0,
      y: 50,
      stagger: 0.2,
      scrollTrigger: {
        trigger: '.stats-section',
        start: 'top 80%',
        end: 'bottom 20%',
        toggleActions: 'play none none reverse'
      }
    });

    // Animate featured section
    gsap.from('.auto-featured-card', {
      duration: 1.2,
      opacity: 0,
      y: 80,
      scrollTrigger: {
        trigger: '.auto-featured-section',
        start: 'top 70%',
        end: 'bottom 20%',
        toggleActions: 'play none none reverse'
      }
    });

    // Animate blog grid items
    gsap.from('.linebox', {
      duration: 1,
      opacity: 0,
      y: 50,
      stagger: 0.2,
      scrollTrigger: {
        trigger: '.blog-grid',
        start: 'top 80%',
        end: 'bottom 20%',
        toggleActions: 'play none none reverse'
      }
    });

    // Horizontal Scroll Animation
    const horizontalSection = document.querySelector('.horizontal-scroll-section');
    const horizontalWrapper = document.querySelector('.horizontal-scroll-wrapper');
    
    if (horizontalSection && horizontalWrapper) {
      // Calculate the total width of the horizontal scroll
      const totalWidth = horizontalWrapper.scrollWidth - horizontalSection.offsetWidth;
      
      // Create the horizontal scroll animation
      gsap.to(horizontalWrapper, {
        x: () => -totalWidth,
        ease: 'none',
        scrollTrigger: {
          trigger: horizontalSection,
          start: 'top top',
          end: () => `+=${totalWidth}`,
          scrub: 1,
          pin: true,
          anticipatePin: 1,
          invalidateOnRefresh: true
        }
      });
    }

    // Counter animations for stats
    const counters = document.querySelectorAll('.stat-number');
    
    counters.forEach(counter => {
      const target = parseInt(counter.textContent);
      let current = 0;
      const increment = target / 50;
      
      const updateCounter = () => {
        if (current < target) {
          current += increment;
          counter.textContent = Math.ceil(current);
          setTimeout(updateCounter, 30);
        } else {
          counter.textContent = target;
        }
      };
      
      // Start counter when in view
      ScrollTrigger.create({
        trigger: counter,
        start: 'top 80%',
        onEnter: updateCounter,
        once: true
      });
    });

    // Search functionality
    const searchInput = document.getElementById('blogSearch');
    const searchResults = document.getElementById('searchResults');
    
    if (searchInput && searchResults) {
      searchInput.addEventListener('input', function() {
        const query = this.value.toLowerCase();
        
        if (query.length < 2) {
          searchResults.style.display = 'none';
          return;
        }
        
        // Filter blog posts based on query
        const filteredPosts = blogData.filter(post => 
          post.title.toLowerCase().includes(query) || 
          post.description.toLowerCase().includes(query) ||
          post.tags.some(tag => tag.toLowerCase().includes(query))
        );
        
        // Display results
        if (filteredPosts.length > 0) {
          searchResults.innerHTML = filteredPosts.map(post => 
            `<div class="search-result-item" data-id="${post.id}">
              <div class="result-title">${post.title}</div>
              <div class="result-meta">${formatDate(post.date)} • ${post.readTime} min read</div>
            </div>`
          ).join('');
          
          searchResults.style.display = 'block';
          
          // Add click event to result items
          document.querySelectorAll('.search-result-item').forEach(item => {
            item.addEventListener('click', function() {
              const postId = this.getAttribute('data-id');
              window.location.href = `/blog/${postId}`;
            });
          });
        } else {
          searchResults.innerHTML = '<div class="search-result-item">Tidak ada hasil ditemukan</div>';
          searchResults.style.display = 'block';
        }
      });
      
      // Hide results when clicking outside
      document.addEventListener('click', function(e) {
        if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {
          searchResults.style.display = 'none';
        }
      });
    }
    
    // Helper function to format date (same as Astro function)
    function formatDate(dateString) {
      const date = new Date(dateString);
      return date.toLocaleDateString('id-ID', { 
        day: 'numeric', 
        month: 'short', 
        year: 'numeric' 
      });
    }
  });
</script>
